var documenterSearchIndex = {"docs":
[{"location":"#YaoExtensions.jl-1","page":"Home","title":"YaoExtensions.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [YaoExtensions]","category":"page"},{"location":"#YaoExtensions.AbstractBag","page":"Home","title":"YaoExtensions.AbstractBag","text":"AbstractBag{BT, N}<:TagBlock{BT, N}\n\nAbstract Bag is a wrapper of a block that conserves all properties. Including mat, apply!, ishermitian, isreflexive, isunitary, occupied_locs, apply_back! and mat_back!.\n\n\n\n\n\n","category":"type"},{"location":"#YaoExtensions.Bag","page":"Home","title":"YaoExtensions.Bag","text":"Bag{N}<:TagBlock{AbstractBlock, N}\n\nA bag is a trivil container, but can     * setcontent!(bag, content)     * disable_block!(bag)     * enable_block!(bag)\n\n\n\n\n\n","category":"type"},{"location":"#YaoExtensions.Diff","page":"Home","title":"YaoExtensions.Diff","text":"Diff{GT, N} <: TagBlock{GT, N}\nDiff(block) -> Diff\n\nMark a block as quantum differentiable.\n\n\n\n\n\n","category":"type"},{"location":"#YaoExtensions.KMod","page":"Home","title":"YaoExtensions.KMod","text":"KMod{N, K} <: PrimitiveBlock{N}\n\nThe first K qubits are exponent k, and the rest N-K are base a, it calculates mod(a^k*x, L), notice gcd(a, L) should be 1.\n\n\n\n\n\n","category":"type"},{"location":"#YaoExtensions.MMD","page":"Home","title":"YaoExtensions.MMD","text":"MMD{T,FT,VT<:AbstractVector{T}}\nMMD(f, probs) -> MMD\n\nMMD loss, VT is the typeof probability vector, FT is the type of kernel function.\n\n\n\n\n\n","category":"type"},{"location":"#YaoExtensions.Mod","page":"Home","title":"YaoExtensions.Mod","text":"Mod{N} <: PrimitiveBlock{N}\n\ncalculates mod(a*x, L), notice gcd(a, L) should be 1.\n\n\n\n\n\n","category":"type"},{"location":"#YaoExtensions.PauliString-Tuple{Array{T,1} where T}","page":"Home","title":"YaoExtensions.PauliString","text":"PauliString(list::Vector)\n\nCreate a PauliString from a list of Pauli gates.\n\nExample\n\njulia> PauliString([X, Y, Z])\n┌ Warning: `PauliString` will be moved to `YaoExtensions.jl` in the next release.\n└ @ YaoBlocks ~/.julia/packages/YaoBlocks/XXC9Y/src/composite/pauli_strings.jl:8\nnqubits: 3\nPauliString\n├─ X gate\n├─ Y gate\n└─ Z gate\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.PauliString-Tuple{Vararg{Union{I2Gate, XGate, YGate, ZGate},N} where N}","page":"Home","title":"YaoExtensions.PauliString","text":"PauliString(xs::PauliGate...)\n\nCreate a PauliString from some Pauli gates.\n\nExample\n\njulia> PauliString(X, Y, Z)\n┌ Warning: `PauliString` will be moved to `YaoExtensions.jl` in the next release.\n└ @ YaoBlocks ~/.julia/packages/YaoBlocks/XXC9Y/src/composite/pauli_strings.jl:8\nnqubits: 3\nPauliString\n├─ X gate\n├─ Y gate\n└─ Z gate\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.ReflectGate","page":"Home","title":"YaoExtensions.ReflectGate","text":"ReflectGate{N, T, Tr} <: PrimitiveBlock{N}\n\nReflection operator to target state psi.\n\nDefinition\n\nψ  2 ss - 1\n\n\n\n\n\n","category":"type"},{"location":"#YaoExtensions.ReflectGate-Tuple{AbstractArray{#s30,1} where #s30<:Complex}","page":"Home","title":"YaoExtensions.ReflectGate","text":"ReflectGate(r::AbstractVector)\n\nCreate a ReflectGate with a quantum state vector v.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.ReflectGate-Union{Tuple{ArrayReg{1,T,MT} where MT<:AbstractArray{T,2}}, Tuple{T}} where T","page":"Home","title":"YaoExtensions.ReflectGate","text":"ReflectGate(r::ArrayReg{1})\n\nCreate a ReflectGate with a quantum register r.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.RotBasis","page":"Home","title":"YaoExtensions.RotBasis","text":"RotBasis{T} <: PrimitiveBlock{1, Complex{T}}\n\nA special rotation block that transform basis to angle θ and ϕ in bloch sphere.\n\n\n\n\n\n","category":"type"},{"location":"#YaoExtensions.StatFunctional","page":"Home","title":"YaoExtensions.StatFunctional","text":"StatFunctional{N, F}\nStatFunctional{N}(f::F) -> StatFunctional{N}\n\nf is a function, f(xᵢ,xⱼ,xₖ...), this functional is 1/C(r,n)... ∑ᵢⱼₖ...f(xᵢ,xⱼ,xₖ...), see U-statistics for detail.\n\nReferences:     U-statistics, http://personal.psu.edu/drh20/asymp/fall2006/lectures/ANGELchpt10.pdf\n\n\n\n\n\n","category":"type"},{"location":"#YaoExtensions.Wait","page":"Home","title":"YaoExtensions.Wait","text":"Wait{N, T} <: TrivilGate{N}\nWait{N}(t)\n\nWait the experimental signals for time t (empty run).\n\n\n\n\n\n","category":"type"},{"location":"#YaoExtensions.basis_rotor-Tuple{YaoBlocks.ConstGate.ZGate}","page":"Home","title":"YaoExtensions.basis_rotor","text":"basis_rotor(::ZGate) -> AbstractBlock\nbasis_rotor(basis::PauliGate, nbit, locs) -> AbstractBlock\n\nReturn a block to rotate the basis to pauli basis for measurements.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.cz_entangler-Tuple{Int64,Any}","page":"Home","title":"YaoExtensions.cz_entangler","text":"control-Z entangler.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.faithful_grad-Tuple{YaoBlocks.AbstractBlock,Pair{#s51,#s50} where #s50<:YaoBlocks.AbstractBlock where #s51<:YaoArrayRegister.ArrayReg}","page":"Home","title":"YaoExtensions.faithful_grad","text":"faithful_grad(x, pair::Pair{<:ArrayReg, <:AbstractBlock}) -> Vector\n\nDifferentiate x over all parameters. x can be an AbstractBlock, StatFunctional or MMD.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.general_U4-Tuple{}","page":"Home","title":"YaoExtensions.general_U4","text":"general_U4([params...]) -> AbstractBlock\n\nA general two qubits gate decomposed to (CNOT, Ry, Rz), parameters default to 0.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.heisenberg-Tuple{Int64}","page":"Home","title":"YaoExtensions.heisenberg","text":"heisenberg(nbit::Int; periodic::Bool=true)\n\n1D heisenberg hamiltonian, for its ground state, refer PRB 48, 6141.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.inverselines-Tuple{Int64}","page":"Home","title":"YaoExtensions.inverselines","text":"inverselines(nbit::Int; n_reg::Int=nbit) -> ChainBlock\n\ninverse first n_reg lines\n\nTODO: deprecate this function, it is not used.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.invorder_firstdim-Tuple{Array{T,2} where T}","page":"Home","title":"YaoExtensions.invorder_firstdim","text":"invorder_firstdim(v::VecOrMat) -> VecOrMat\n\ninverse the bit order of first dimension.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.markdiff","page":"Home","title":"YaoExtensions.markdiff","text":"markdiff(mode::Symbol, block::AbstractBlock) -> AbstractBlock\nmarkdiff(mode::Symbol) -> Function\n\nautomatically mark differentiable items in a block tree as differentiable.\n\n\n\n\n\n","category":"function"},{"location":"#YaoExtensions.mathgate-Tuple{Int64,Any}","page":"Home","title":"YaoExtensions.mathgate","text":"mathgate(nbits, f)\n\nCreate a MathGate with a math function f and number of bits.\n\nmathgate(f) -> f(n)\n\nLazy curried version of mathgate.\n\nExample\n\nWe can make a classical toffoli gate on quantum register.\n\njulia> r = ArrayReg(bit\"110\")\nArrayReg{1, Complex{Float64}, Array...}\n    active qubits: 3/3\n\njulia> function toffli(b::BitStr)\n           t = @inbounds b[1] ⊻ (b[3] & b[2])\n           return @inbounds bit_literal(t, b[2], b[3])\n       end\ntoffli (generic function with 1 method)\n\njulia> g = mathgate(3, toffli)\n┌ Warning: `MathGate` will be moved to `YaoExtensions.jl` in the next release.\n└ @ YaoBlocks ~/.julia/packages/YaoBlocks/XXC9Y/src/primitive/math_gate.jl:8\nmathgate(toffli; nbits=3)\n\njulia> apply!(r, g) == ArrayReg(bit\"111\")\ntrue\n\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.merged_rotor","page":"Home","title":"YaoExtensions.merged_rotor","text":"merged_rotor(noleading::Bool=false, notrailing::Bool=false) -> ChainBlock{1, ComplexF64}\n\nSingle qubit arbitrary rotation unit, set parameters notrailing, noleading true to remove trailing and leading Z gates.\n\nnote: Note\nHere, merged means Rz(η)⋅Rx(θ)⋅Rz(ξ) are multiplied first, this kind of operation if now allowed in differentiable circuit with back-propagation (:BP) mode (just because we are lazy to implement it!). But is a welcoming component in quantum differentiation.\n\n\n\n\n\n","category":"function"},{"location":"#YaoExtensions.numdiff","page":"Home","title":"YaoExtensions.numdiff","text":"numdiff(loss, circuit::AbstractBlock, δ::Real=1e-2) => Vector\n\nNumeric differentiation a loss over a circuit, the loss take the circuit as input.\n\n\n\n\n\n","category":"function"},{"location":"#YaoExtensions.openbox-Union{Tuple{QFTBlock{N}}, Tuple{N}} where N","page":"Home","title":"YaoExtensions.openbox","text":"openbox(block::AbstractBlock) -> AbstractBlock\n\nFor a black box, like QFTBlock, you can get its white box (faithful simulation) using this function.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.pair_ring-Tuple{Int64}","page":"Home","title":"YaoExtensions.pair_ring","text":"pair_ring(n::Int) -> Vector\n\nPair ring.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.pair_square-Tuple{Int64,Int64}","page":"Home","title":"YaoExtensions.pair_square","text":"pair_square(m::Int, n::Int) -> Vector\n\nPair square.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.pair_supremacy-Tuple{Int64,Int64}","page":"Home","title":"YaoExtensions.pair_supremacy","text":"obtain supremacy pairing patterns\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.polar2u-Tuple{Array{T,1} where T}","page":"Home","title":"YaoExtensions.polar2u","text":"polar2u(vec::Array) -> Array\n\ntransform polar angle to su(2) state vector, apply to the first dimension of size 2.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.rand_gate-Tuple{Int64,Int64}","page":"Home","title":"YaoExtensions.rand_gate","text":"rand_gate(nbit::Int, mbit::Int, [ngate::Int]) -> AbstractBlock\n\nrandom nbit gate.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.rand_google53-Tuple{Int64}","page":"Home","title":"YaoExtensions.rand_google53","text":"rand_google53(depth::Int; seed=1, nbits=53) -> AbstactBlock\n\nrandom google supremacy circuit with 53 qubits.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.rand_supremacy2d-Tuple{Int64,Int64,Int64}","page":"Home","title":"YaoExtensions.rand_supremacy2d","text":"rand_supremacy2d(nx::Int, ny::Int, depth::Int; seed=1) -> AbstactBlock\n\nrandom supremacy circuit.\n\nNOTE: the restriction to T gate is removed.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.randpolar-Tuple{Vararg{Int64,N} where N}","page":"Home","title":"YaoExtensions.randpolar","text":"randpolar(params::Int...) -> Array\n\nrandom polar basis, number of basis\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.reflect-Tuple{AbstractArray{#s30,1} where #s30<:Complex}","page":"Home","title":"YaoExtensions.reflect","text":"reflect(v::AbstractVector{<:Complex})\n\nCreate a ReflectGate with an quantum state vector v.\n\nExample\n\njulia> reflect(rand_state(3))\n┌ Warning: `ReflectGate` will be moved to `YaoExtensions.jl` in the next release.\n└ @ YaoBlocks ~/.julia/packages/YaoBlocks/XXC9Y/src/primitive/reflect_gate.jl:19\nreflect(ArrayReg{1, Complex{Float64}, Array...})\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.reflect-Tuple{YaoArrayRegister.ArrayReg}","page":"Home","title":"YaoExtensions.reflect","text":"reflect(r::ArrayReg)\n\nCreate a ReflectGate with an ArrayReg.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.rotor","page":"Home","title":"YaoExtensions.rotor","text":"rotor(nbit::Int, ibit::Int, noleading::Bool=false, notrailing::Bool=false) -> ChainBlock{nbit, ComplexF64}\n\nArbitrary rotation unit (put in nbit space), set parameters notrailing, noleading true to remove trailing and leading Z gates.\n\n\n\n\n\n","category":"function"},{"location":"#YaoExtensions.transverse_ising-Tuple{Int64}","page":"Home","title":"YaoExtensions.transverse_ising","text":"transverse_ising(nbit::Int; periodic::Bool=true)\n\n1D transverse ising hamiltonian.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.u2polar-Tuple{Array{T,1} where T}","page":"Home","title":"YaoExtensions.u2polar","text":"u2polar(vec::Array) -> Array\n\ntransform su(2) state vector to polar angle, apply to the first dimension of size 2.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.variational_circuit-Tuple{Any,Any,Any}","page":"Home","title":"YaoExtensions.variational_circuit","text":"variational_circuit(nbit[, nlayer][, pairs]; mode=:Split, do_cache=false, entangler=cnot)\n\nA kind of widely used differentiable quantum circuit, angles in the circuit is randomely initialized.\n\n* pairs: list of `Pair`s for entanglers in a layer, default to `pair_ring` structure,\n* mode: :Split or :Merged,\n* do_cache: cache the entangler matrix,\n* entangler: a constructor returns a two qubit gate, `f(n,i,j) -> gate`.\n    The default value is `cnot(n,i,j)`.\n\nref:     1. Kandala, A., Mezzacapo, A., Temme, K., Takita, M., Chow, J. M., & Gambetta, J. M. (2017).        Hardware-efficient Quantum Optimizer for Small Molecules and Quantum Magnets. Nature Publishing Group, 549(7671), 242–246.        https://doi.org/10.1038/nature23879.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.NDWeights","page":"Home","title":"YaoExtensions.NDWeights","text":"NDWeights{N, AT<:AbstractArray{T,N} where T}\n\nWeights not limited to 1 dimension.\n\n\n\n\n\n","category":"type"},{"location":"#YaoBlocks.expect-Union{Tuple{T}, Tuple{StatFunctional{2,F} where F,Union{AbstractArray{T,1}, AbstractArray{T,2}}}} where T<:Integer","page":"Home","title":"YaoBlocks.expect","text":"U-statistics of order 2.\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.eyeblock-Tuple{Int64}","page":"Home","title":"YaoExtensions.eyeblock","text":"Identity block\n\n\n\n\n\n","category":"method"},{"location":"#YaoExtensions.mod_inverse-Tuple{Int64,Int64}","page":"Home","title":"YaoExtensions.mod_inverse","text":"mod_inverse(x::Int, N::Int) -> Int\n\nReturn y that (x*y)%N == 1, notice the (x*y)%N operations in Z* forms a group and this is the definition of inverse.\n\n\n\n\n\n","category":"method"}]
}
